import React, { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import qs from 'qs';
import Categories from '../compoments/Categories';
import Sort, { list } from '../compoments/Sort';
import PizzaBlock from '../compoments/PizzaBlock';
import Skeleton from '../compoments/PizzaBlock/Skeleton';
import Pagination from '../compoments/Pagination';
import { useSelector } from 'react-redux';
import { setCategoryId, setCurrentPage, setFilters } from '../redux/filter/slice';
import { selectFilter } from '../redux/filter/selectors';
import { fetchPizzas } from '../redux/pizzas/asyncActions';
import { FetchPizzasProps } from '../redux/pizzas/types';
import { selectPizzasData } from '../redux/pizzas/selectors';
import { useAppDispatch } from '../redux/store';

const Home: React.FC = () => {
  const navigate = useNavigate();
  const dispatch = useAppDispatch();
  const isSearch = React.useRef(false);
  const isMounted = React.useRef(false);
  const { categoryId, sort, currentPage, searchValue } = useSelector(selectFilter);
  const { items, status } = useSelector(selectPizzasData);

  const onChangeCategory = React.useCallback((idx: number) => {
    dispatch(setCategoryId(idx));
  }, []);

  const onChangePage = (page: number) => {
    dispatch(setCurrentPage(page));
  };

  const getPizzas = () => {
    const sortBy = sort.sortProperty;
    const category = categoryId > 0 ? `category=${categoryId}` : '';
    const search = searchValue ? `search=${searchValue}` : '';

    dispatch(
      //@ts-ignore
      fetchPizzas({
        currentPage,
        category,
        search,
        sortBy,
      }),
    );
  };

  React.useEffect(() => {
    //—Å–æ –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞ –º–µ–Ω—è–π url-–∞–¥—Ä–µ—Å –∏—Å—Ö–æ–¥—è –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ redux
    if (isMounted.current) {
      const queryString = qs.stringify({
        sortProperty: sort.sortProperty,
        categoryId,
        currentPage,
      });
      navigate(`?${queryString}`);
    }
    isMounted.current = true;
  }, [categoryId, sort.sortProperty, currentPage]);

  //–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, –ø—Ä–æ–≤–µ—Ä—è–µ–º url-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ redux
  React.useEffect(() => {
    if (window.location.search) {
      const params = qs.parse(window.location.search.substring(1)) as unknown as FetchPizzasProps;
      const sort = list.find((obj) => obj.sortProperty === params.sortBy);

      dispatch(
        setFilters({
          searchValue: params.search,
          categoryId: Number(params.category),
          currentPage: params.currentPage,
          sort: sort ? sort : list[0],
        }),
      );
      isSearch.current = true; //–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ url –ø—Ä–∏—à–ª–∏
    }
  }, []);

  useEffect(() => {
    //–µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ url, —Ç–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –Ω–µ –¥–µ–ª–∞–π fetch-–∑–∞–ø—Ä–æ—Å
    if (!isSearch.current) {
      getPizzas();
    }

    isSearch.current = false;
    window.scrollTo(0, 0);
  }, [categoryId, sort.sortProperty, searchValue, currentPage]);

  const pizzas = items.map((el: any) => (
    <PizzaBlock
      key={el.id}
      id={el.id}
      title={el.title}
      price={el.price}
      image={el.imageUrl}
      sizes={el.sizes}
      types={el.types}
    />
  ));
  const skeletons = [...new Array(8)].map((_, i) => <Skeleton key={i} />);

  return (
    <div className="container">
      <div className="content__top">
        <Categories value={categoryId} onChangeCategory={onChangeCategory} />
        <Sort value={sort} />
      </div>

      {status === 'error' ? (
        <div className="content__error-info">
          <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòï</h2>

          <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ç—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ</p>
        </div>
      ) : (
        <>
          <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
          <div className="content__items">{status === 'loading' ? skeletons : pizzas}</div>
        </>
      )}

      <Pagination currentPage={currentPage} onPageChange={onChangePage} />
    </div>
  );
};

export default Home;
